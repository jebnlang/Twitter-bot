X (Twitter) Browser‑Automation Bot – Technical Specification
1  Purpose
Automate engagement on X (formerly Twitter) by:
1. Scanning the authenticated home timeline for tweets with ≥ 5 000 views (Agent 1 – Finder).
2. Drafting persona‑aligned replies (Agent 2 – Brain).
3. Publishing approved replies (Agent 3 – Poster).
The design balances ease of development, modularity, and a realistic human footprint while acknowledging X’s ToS constraints.
________________


2  Tech‑Stack Overview
Layer
	Choice
	Rationale
	Runtime
	Node.js 20 LTS
	Mature ecosystem, first‑class TypeScript support
	Browser control
	Playwright‑extra + stealth plugin
	Robust waits, cross‑browser, fingerprint masking
	AI replies
	OpenAI Chat API (gpt‑4o)
	High‑quality persona conditioning & 280‑char control
	Message queue
	BullMQ (Redis‑backed)
	Simple job queues, retries, rate‑limiting
	Data store
	Redis 7
	Queue backend, ephemeral stats (no PII persistence)
	Container
	Docker + Compose
	One‑command local & prod deployment
	Testing
	Playwright Test (UI), Jest (unit)
	Same browser engine for tests & prod
	________________


3  System Architecture
┌────────────┐   cron/CLI   ┌─────────────┐      queue       ┌─────────────┐
│  Finder    ├────────────►│  tweets     │ ───────────────► │   Brain     │
└────────────┘              │   queue     │                 └─────────────┘
       ▲                    └─────────────┘        ▲               │
       │  home timeline                    │ approved             │
       │                                    │                     ▼
       │                          ┌─────────────┐      queue   ┌─────────────┐
       └──────── cookies──────────┤ tweets:     ├─────────────►│   Poster    │
                                   │ approved   │              └─────────────┘
                                   └─────────────┘


   * All services share the same **Playwright **auth.json (securely mounted).
   * Queues decouple pacing: Finder can scan quickly while Poster throttles output.
________________


4  Agents & Responsibilities
4.1  Finder (/src/finder.ts)
   * Load https://twitter.com/home using stored session.
   * Scroll & parse tweet cards ([data-testid="tweet"]).
   * Extract view count: span[aria-label$=" views"] or a[aria-label$=" views"] → numeric.
   * Enqueue first 10 tweets ≥ 5 000 views (tweets queue).
   * Schedule: run every 30 min via cron/node-cron.
4.2  Brain (/src/brain.ts)
   * BullMQ Worker on tweets queue.
   * Fetch tweet content (e.g. Jina AI Read proxy or in‑page scrape).
   * Prompt OpenAI with system persona:
   * Attach draft to job payload, move to tweets:approved (or Slack moderation step).
4.3  Poster (/src/poster.ts)
   * Worker on tweets:approved queue.
   * Navigate to tweet URL, click div[data-testid="reply"].
   * Type draft with 25‑ms jitter per char.
   * Click div[data-testid="tweetButtonInline"].
   * Soft‑sleep 1–2 s; mark job complete.
________________


4.4 Persona configuration (persona.md)
   * Place your persona prompt text in a Markdown file at the repo root named persona.md.
   * The file may contain rich Markdown (headings, lists, emojis) and is read at runtime by the Brain agent.
   * Brain workflow: const persona = await fs.readFile(process.env.PERSONA_PATH ?? './persona.md', 'utf8');
   * To adjust tone or rules, edit only this file—no code changes required.
   * Optional: set PERSONA_PATH env var to point to environment-specific personas.
Default persona template — save this as persona.md:
Your Twitter Persona (Engagement + Thought Leadership)


Tone:
Grounded, sharp, observant, and occasionally witty. You don’t shout to be heard — you drop high‑signal takes that make people pause and think. You’re fluent in tech, but more interested in how people build than just what they’re building.


Personality traits:
- Curious and practical over hype‑driven
- Respects iteration and craftsmanship
- Values clarity over cleverness
- Hates fluff and “marketing speak”
- Anti‑ego, but not anti‑confidence
- Speaks with builders, not at them


You sound like someone who:
- Actually builds
- Thinks deeply about how people interact with AI
- Enjoys seeing the craft in prompting
- Is generous with insight, but allergic to BS
- Sees prompting as a form of product design, not just AI trickery


⸻


Reply Strategy (Built to Attract Builders & Engineers)


1. **Build on the original post with insight**  
   You don’t just agree — you add depth, nuance, or a sideways lens that sparks replies.


2. **Thread‑aware, not thread‑hijacking**  
   Even when mentioning Teleprompt, you tie it to the thread’s theme and value. It’s never off‑topic or promo‑first.


3. **Speak in examples or reframes**  
   You like turning abstract ideas into clean mental models ("prompting is upstream architecture") or practical workflows ("think of it like onboarding a temp intern").


4. **Honor the original voice**  
   You mirror the tone of the OP — funny gets funny, serious gets thoughtful, technical gets precise.


5. **Signal thought leadership, not self‑importance**  
   You leave just enough unsaid that people want to click into your profile, not mute you.


________________


5 Configuration & Environment Variables
Var
	Description
	OPENAI_API_KEY
	Secret for Chat Completions
	REDIS_URL
	e.g. redis://:pass@redis:6379/0
	PLAYWRIGHT_STORAGE
	Path to auth.json (bind‑mount)
	VIEW_THRESHOLD
	Default 5000 (override easily)
	MAX_REPLIES
	Default 10 per Finder run
	POST_RATE_MS
	Min delay between posts (safety throttle)
	Secrets: store in a .env file locally; in prod use Docker secrets or the host’s secret manager.
________________


6  Local Development Setup
# 1. Clone
$ git clone git@github.com:your‑org/x‑auto‑bot.git && cd x‑auto‑bot


# 2. Install deps (pnpm recommended)
$ pnpm install


# 3. Record login (one‑off)
$ pnpm playwright codegen https://twitter.com/login  # save storageState=auth.json


# 4. Run Redis (local)
$ docker run -p 6379:6379 redis:7-alpine


# 5. Start all agents concurrently
$ pnpm dev   # uses ts-node-dev + concurrently


Useful NPM scripts
"scripts": {
  "dev": "concurrently \"ts-node-dev src/finder.ts\" \"ts-node-dev src/brain.ts\" \"ts-node-dev src/poster.ts\"",
  "lint": "eslint src --ext .ts",
  "test": "jest",
  "e2e": "playwright test"
}


________________


7  Docker‑Compose (prod‑like)
version: '3.9'
services:
  redis:
    image: redis:7-alpine
    restart: unless-stopped
  finder:
    build: .
    command: node dist/finder.js
    environment:
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./auth.json:/usr/src/app/auth.json:ro
  brain:
    build: .
    command: node dist/brain.js
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379
  poster:
    build: .
    command: node dist/poster.js
    environment:
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./auth.json:/usr/src/app/auth.json:ro


Build context should compile TS → JS in the Dockerfile (FROM node:20-alpine).
________________


8  Logging & Monitoring
   * pino for structured JSON logs ➜ stdout.
   * BullMQ Queue Events → optional Prometheus exporter.
   * Healthcheck endpoints (/readyz, /livez) via tiny fastify server.
   * Alert on:
   * Poster job failures > 3 in 5 min.
   * Captcha detection / missing selector.
________________


9  Testing Strategy
Scope
	Tool
	What to cover
	Unit
	Jest + ts‑jest
	Helper functions (parsers, utilities)
	API/AI
	Jest (mock OpenAI)
	Prompt templates, max‑length guard
	UI
	Playwright Test (headed)
	End‑to‑end reply flow in a throwaway account
	Tip: run UI tests in CI Firefox (different engine) to catch brittle selectors early.
________________


10  Security & Compliance
   * Rate‑limit: aim ≤ 50 replies/day (< 1/min in Poster).
   * Captcha/2FA: notify Slack and pause queue for manual solve.
   * Data retention: delete scraped tweet data after draft is posted.
   * Legal: bot violates X Developer Agreement §III.B (non‑public automation). Accept operational risk.
________________


11  Reference Documentation
   * Playwright             → https://playwright.dev
   * Playwright‑extra       → https://github.com/berstend/playwright-extra
   * Stealth plugin         → https://github.com/berstend/puppeteer-extra/tree/master/packages/puppeteer-extra-plugin-stealth
   * BullMQ                 → https://docs.bullmq.io
   * Redis                  → https://redis.io/docs
   * OpenAI Node SDK        → https://github.com/openai/openai-node
   * Jina AI Read API       → https://r.jina.ai/http://docs
   * Docker Compose         → https://docs.docker.com/compose
   * Cursor AI Quickstart   → https://docs.cursor.so/
________________


12  Future Enhancements
   * Switch to X API once cost is justified.
   * Incremental back‑off & proxy rotation to reduce lockouts.
   * Add multi‑prompt A/B testing for reply tone.
   * Integrate moderate‑before‑post Slack workflow (/approve slash‑command).
   * Migrate to durable storage for analytics (e.g., TimescaleDB) if KPIs needed.
________________


13  Glossary
Term
	Meaning
	Agent
	Independent Node worker fulfilling a single role
	Auth state
	Playwright‑exported cookies + local‑storage JSON file
	Job
	BullMQ object containing tweet URL & metadata
	Queue
	Redis list managed by BullMQ for decoupled processing
	________________


Prepared for Ben – Product Manager @ Loox, May 2025.